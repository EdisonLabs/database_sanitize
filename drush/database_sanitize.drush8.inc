<?php

/**
 * @file
 * Drush Database Sanitize commands.
 */

/**
 * Implements hook_drush_help().
 */
function database_sanitize_drush_help($section) {
  switch ($section) {
    case 'meta:database_sanitize:title':
      return dt('Database Sanitize commands');

    case 'meta:database_sanitize:summary':
      return dt('Helper commands for dealing with database sanitization yaml files.');

    case 'drush:db-sanitize-analyze':
      return dt('Provides a report on database tables not defined in the specified merged yml file.');

    case 'drush:db-sanitize-generate':
      return dt('Generates a database.sanitize.yml file for tables not defined in the specified merged yaml file.');
  }
}

/**
 * Implements hook_drush_command().
 */
function database_sanitize_drush_command() {
  $items['db-sanitize-analyze'] = [
    'description' => "Checks existing database.sanitize.yml files on the site installation against existing database tables.",
    'callback' => 'database_sanitize_analyze',
    'aliases' => ['dbsa'],
    'options' => [
      'merge-file' => [
        'description' => 'The full path to the merged sanitize file.',
        'required' => FALSE,
        'example-value' => 'NON-PUBLIC-FOLDER/database.sanitize.merge.yml',
      ],
    ],
    'bootstrap' => DRUSH_BOOTSTRAP_DRUPAL_FULL,
  ];

  $items['db-sanitize-generate'] = [
    'description' => "Generates a database.sanitize.yml file for tables not specified in the merged yaml file.",
    'callback' => 'database_sanitize_generate',
    'aliases' => ['dbsg'],
    'options' => [
      'merge-file' => [
        'description' => 'The full path to the merged sanitize file.',
        'required' => FALSE,
        'example-value' => 'NON-PUBLIC-FOLDER/database.sanitize.merge.yml',
      ],
      'machine-name' => [
        'description' => 'The machine name to export the tables under.',
        'required' => TRUE,
        'example-value' => 'MODULE_NAME',
      ],
    ],
    'outputformat' => [
      'default' => 'yaml',
      'output-data-type' => 'format-yaml',
    ],
    'bootstrap' => DRUSH_BOOTSTRAP_DRUPAL_FULL,
  ];

  return $items;
}

/**
 * Command callback for db-sanitize-analyze.
 */
function database_sanitize_analyze() {
  $yml_file_path = drush_get_option('merge-file');
  if ($yml_file_path && !file_exists($yml_file_path)) {
    return drush_set_error(dt('File does not exist @file', ['@file' => $yml_file_path]));
  }

  $missing_tables = \Drupal::service('database_sanitize')->getUnspecifiedTables($yml_file_path);

  if ($missing_tables === FALSE) {
    return;
  }

  drush_log(dt('There are @count tables not defined to be sanitized.', ['@count' => count($missing_tables)]), 'warning');
}

/**
 * Command callback for db-sanitize-generate.
 */
function database_sanitize_generate() {
  $machine_name = drush_get_option('machine-name');
  if (empty($machine_name)) {
    return drush_set_error(dt('You must specify a machine-name.'));
  }
  $yml_file_path = drush_get_option('merge-file');
  $missing_tables = \Drupal::service('database_sanitize')->getUnspecifiedTables($yml_file_path);
  if ($missing_tables === FALSE) {
    return;
  }

  $content = [
    'sanitize' => [
      $machine_name => [],
    ],
  ];
  foreach ($missing_tables as $table) {
    $content['sanitize'][$machine_name][$table] = [
      'description' => 'Generated by drush db-sanitize-generate',
      'query' => "TRUNCATE TABLE {$table}",
    ];
  }

  return $content;
}
